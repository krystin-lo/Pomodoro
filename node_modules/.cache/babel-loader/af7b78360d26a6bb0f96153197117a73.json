{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kryst\\\\Desktop\\\\pomodoro\\\\Project_Pomodoro_Timer_Qualified_1\\\\src\\\\pomodoro\\\\Pomodoro.js\";\nimport React, { useState } from \"react\";\nimport useInterval from \"../utils/useInterval\";\nimport Time from \"./Time\";\nimport Control from \"./Control\";\nimport ProgressBar from \"./ProgressBar\";\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  const [focusDuration, setFocusDuration] = useState(25); // stores time in minutes\n\n  const [breakDuration, setBreakDuration] = useState(5); // ... minutes\n\n  const [timer, setTimer] = useState(25 * 60); // stores time in seconds\n\n  const [mode, setMode] = useState(\"focus\");\n  const [isSessionActive, setIsSessionActive] = useState(false);\n  const [isSessionPaused, setIsSessionPaused] = useState(true);\n\n  const handleIncreaseFocus = () => {\n    setFocusDuration(currentFocus => {\n      return Math.min(60, currentFocus + 5);\n    });\n  };\n\n  const handleDecreaseFocus = () => {\n    setFocusDuration(currentFocus => {\n      return Math.max(5, currentFocus - 5);\n    });\n  };\n\n  const handleIncreaseBreak = () => {\n    setBreakDuration(currentBreak => {\n      return Math.min(15, currentBreak + 1);\n    });\n  };\n\n  const handleDecreaseBreak = () => {\n    setBreakDuration(currentBreak => {\n      return Math.max(1, currentBreak - 1);\n    });\n  };\n\n  const handlePlay = () => {\n    if (!isSessionActive) {\n      setIsSessionActive(true);\n      setTimer(focusDuration * 60);\n    }\n\n    setIsSessionPaused(prevState => !prevState);\n    setIsTimerRunning(prevState => !prevState);\n  };\n\n  const stopTimer = () => {\n    setIsSessionActive(false);\n    setIsSessionPaused(true);\n    setIsTimerRunning(false);\n    setMode(\"focus\");\n  };\n\n  useInterval(() => {\n    // ToDo: Implement what should happen when the timer is running\n    if (timer === 0) {\n      new Audio(`https://bigsoundbank.com/UPLOAD/mp3/0023.mp3`).play();\n      const newTimer = mode === \"focus\" ? breakDuration : focusDuration;\n      setTimer(newTimer * 60);\n      setMode(prevState => prevState === \"focus\" ? \"break\" : \"focus\");\n      return;\n    } // setTimer(timer - 1);\n\n\n    setTimer(currentTimer => currentTimer - 1);\n  }, isTimerRunning ? 1000 : null);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pomodoro\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Time, {\n    labelText: \"Focus\",\n    duration: focusDuration,\n    handleDecrease: handleDecreaseFocus,\n    handleIncrease: handleIncreaseFocus,\n    isSessionActive: isSessionActive,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"float-right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Time, {\n    labelText: \"Break\",\n    duration: breakDuration,\n    handleDecrease: handleDecreaseBreak,\n    handleIncrease: handleIncreaseBreak,\n    isSessionActive: isSessionActive,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }\n  })))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Control, {\n    handle: playPause,\n    isTimerRunning: isTimerRunning,\n    handleStop: stopTimer,\n    isSessionActive: isSessionActive,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(ProgressBar, {\n    mode: mode,\n    timer: timer,\n    isSessionActive: isSessionActive,\n    focusDuration: focusDuration,\n    breakDuration: breakDuration,\n    isSessionPaused: isSessionPaused,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default Pomodoro;","map":{"version":3,"sources":["C:/Users/kryst/Desktop/pomodoro/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js"],"names":["React","useState","useInterval","Time","Control","ProgressBar","Pomodoro","isTimerRunning","setIsTimerRunning","focusDuration","setFocusDuration","breakDuration","setBreakDuration","timer","setTimer","mode","setMode","isSessionActive","setIsSessionActive","isSessionPaused","setIsSessionPaused","handleIncreaseFocus","currentFocus","Math","min","handleDecreaseFocus","max","handleIncreaseBreak","currentBreak","handleDecreaseBreak","handlePlay","prevState","stopTimer","Audio","play","newTimer","currentTimer","playPause"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport useInterval from \"../utils/useInterval\";\nimport Time from \"./Time\"\nimport Control from \"./Control\"\nimport ProgressBar from \"./ProgressBar\";\n\n\n\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  const [focusDuration, setFocusDuration] = useState(25); // stores time in minutes\n  const [breakDuration, setBreakDuration] = useState(5); // ... minutes\n  const [timer, setTimer] = useState(25 * 60); // stores time in seconds\n  const [mode, setMode] = useState(\"focus\");\n  const [isSessionActive, setIsSessionActive] = useState(false);\n  const [isSessionPaused, setIsSessionPaused] = useState(true);\n\n  const handleIncreaseFocus = () => {\n    setFocusDuration((currentFocus) => {\n      return Math.min(60, currentFocus + 5);\n    });\n  };\n\n  const handleDecreaseFocus = () => {\n    setFocusDuration((currentFocus) => {\n      return Math.max(5, currentFocus - 5);\n    });\n  };\n\n  const handleIncreaseBreak = () => {\n    setBreakDuration((currentBreak) => {\n      return Math.min(15, currentBreak + 1);\n    });\n  };\n\n  const handleDecreaseBreak = () => {\n    setBreakDuration((currentBreak) => {\n      return Math.max(1, currentBreak - 1);\n    });\n  };\n\n  const handlePlay = () => {\n    if (!isSessionActive) {\n      setIsSessionActive(true);\n      setTimer(focusDuration * 60);\n    }\n\n    setIsSessionPaused((prevState) => !prevState);\n\n    setIsTimerRunning((prevState) => !prevState);\n  };\n\n  const stopTimer = () => {\n    setIsSessionActive(false);\n    setIsSessionPaused(true);\n    setIsTimerRunning(false);\n    setMode(\"focus\");\n  };\n\n  useInterval(\n    () => {\n      // ToDo: Implement what should happen when the timer is running\n      if (timer === 0) {\n        new Audio(`https://bigsoundbank.com/UPLOAD/mp3/0023.mp3`).play();\n\n        const newTimer = mode === \"focus\" ? breakDuration : focusDuration;\n        setTimer(newTimer * 60);\n\n        setMode((prevState) => (prevState === \"focus\" ? \"break\" : \"focus\"));\n        return;\n      }\n\n      // setTimer(timer - 1);\n      setTimer(currentTimer => currentTimer - 1);\n\n    },\n    isTimerRunning ? 1000 : null\n  );\n  \n  return (\n    <div className=\"pomodoro\">\n      <div className=\"row\">\n        <div className=\"col\">\n          <Time\n            labelText={\"Focus\"}\n            duration={focusDuration}\n            handleDecrease={handleDecreaseFocus}\n            handleIncrease={handleIncreaseFocus}\n            isSessionActive={isSessionActive}\n          />\n        </div>\n        <div className=\"col\">\n          <div className=\"float-right\">\n            <Time\n              labelText={\"Break\"}\n              duration={breakDuration}\n              handleDecrease={handleDecreaseBreak}\n              handleIncrease={handleIncreaseBreak}\n              isSessionActive={isSessionActive}\n            />\n          </div>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col\">\n          <Control\n            handle={playPause}\n            isTimerRunning={isTimerRunning}\n            handleStop={stopTimer}\n            isSessionActive={isSessionActive}\n          />\n        </div>\n      </div>\n      <ProgressBar\n        mode={mode}\n        timer={timer}\n        isSessionActive={isSessionActive}\n        focusDuration={focusDuration}\n        breakDuration={breakDuration}\n        isSessionPaused={isSessionPaused}\n      />\n    </div>\n  );\n}\n\n\nexport default Pomodoro;\n"]},"metadata":{},"sourceType":"module"}