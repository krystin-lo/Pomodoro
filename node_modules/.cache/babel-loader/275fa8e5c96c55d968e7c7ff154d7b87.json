{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kryst\\\\Desktop\\\\pomodoro\\\\Project_Pomodoro_Timer_Qualified_1\\\\src\\\\pomodoro\\\\ProgressBar.js\";\nimport React from \"react\";\nimport { secondsToDuration, minutesToDuration } from \"../utils/duration\";\n\nconst ProgressBar = props => {\n  const {\n    mode,\n    timer,\n    isSessionActive,\n    focusDuration,\n    breakDuration,\n    isSessionPaused\n  } = props;\n  let currentDurationTime = mode === \"focus\" ? focusDuration : breakDuration;\n  currentDurationTime *= 60; // convert minutes to seconds\n\n  const timeElapsed = currentDurationTime - timer;\n  let width;\n\n  if (timer === 0) {\n    width = 100;\n  } else {\n    width = 100 / currentDurationTime * timeElapsed;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: isSessionActive ? \"block\" : \"none\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    \"data-testid\": \"session-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 11\n    }\n  }, mode === \"focus\" ? \"Focusing\" : \"On Break\", \" for\", \" \", mode === \"focus\" ? minutesToDuration(focusDuration) : minutesToDuration(breakDuration), \" \", \"minutes\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"lead\",\n    \"data-testid\": \"session-sub-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 11\n    }\n  }, secondsToDuration(timer), \" remaining\"), /*#__PURE__*/React.createElement(\"h3\", {\n    style: {\n      display: isSessionPaused ? \"block\" : \"none\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 11\n    }\n  }, \"PAUSED\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress\",\n    style: {\n      height: \"20px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress-bar\",\n    role: \"progressbar\",\n    \"aria-valuemin\": \"0\",\n    \"aria-valuemax\": \"100\",\n    \"aria-valuenow\": width // TODO: Increase aria-valuenow as elapsed time increases\n    ,\n    style: {\n      width: `${width}%`\n    } // TODO: Increase width % as elapsed time increases\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }\n  })))));\n};\n\nexport default ProgressBar;","map":{"version":3,"sources":["C:/Users/kryst/Desktop/pomodoro/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/ProgressBar.js"],"names":["React","secondsToDuration","minutesToDuration","ProgressBar","props","mode","timer","isSessionActive","focusDuration","breakDuration","isSessionPaused","currentDurationTime","timeElapsed","width","display","height"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,iBAAT,EAA4BC,iBAA5B,QAAqD,mBAArD;;AAGA,MAAMC,WAAW,GAAIC,KAAD,IAAW;AAC7B,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA,eAAf;AAAgCC,IAAAA,aAAhC;AAA+CC,IAAAA,aAA/C;AAA8DC,IAAAA;AAA9D,MAAkFN,KAAxF;AAEA,MAAIO,mBAAmB,GAAGN,IAAI,KAAK,OAAT,GAAmBG,aAAnB,GAAmCC,aAA7D;AACAE,EAAAA,mBAAmB,IAAI,EAAvB,CAJ6B,CAIF;;AAC3B,QAAMC,WAAW,GAAGD,mBAAmB,GAAGL,KAA1C;AAEA,MAAIO,KAAJ;;AACA,MAAIP,KAAK,KAAK,CAAd,EAAiB;AACfO,IAAAA,KAAK,GAAG,GAAR;AACD,GAFD,MAEO;AACLA,IAAAA,KAAK,GAAI,MAAMF,mBAAP,GAA8BC,WAAtC;AACD;;AAED,sBACE;AAAK,IAAA,KAAK,EAAE;AAAEE,MAAAA,OAAO,EAAEP,eAAe,GAAG,OAAH,GAAa;AAAvC,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEE;AAAI,mBAAY,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGF,IAAI,KAAK,OAAT,GAAmB,UAAnB,GAAgC,UADnC,UACmD,GADnD,EAEGA,IAAI,KAAK,OAAT,GAAmBH,iBAAiB,CAACM,aAAD,CAApC,GAAsDN,iBAAiB,CAACO,aAAD,CAF1E,EAE2F,GAF3F,YAFF,eAQE;AAAG,IAAA,SAAS,EAAC,MAAb;AAAoB,mBAAY,mBAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEGR,iBAAiB,CAACK,KAAD,CAFpB,eARF,eAYE;AAAI,IAAA,KAAK,EAAE;AAAEQ,MAAAA,OAAO,EAAEJ,eAAe,GAAG,OAAH,GAAa;AAAvC,KAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAZF,CADF,CAFF,eAkBE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAA0B,IAAA,KAAK,EAAE;AAAEK,MAAAA,MAAM,EAAE;AAAV,KAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,IAAA,SAAS,EAAC,cADZ;AAEE,IAAA,IAAI,EAAC,aAFP;AAGE,qBAAc,GAHhB;AAIE,qBAAc,KAJhB;AAKE,qBAAeF,KALjB,CAKwB;AALxB;AAME,IAAA,KAAK,EAAE;AAAEA,MAAAA,KAAK,EAAG,GAAEA,KAAM;AAAlB,KANT,CAMiC;AANjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CADF,CAlBF,CADF;AAmCD,CAjDD;;AAmDA,eAAeV,WAAf","sourcesContent":["import React from \"react\";\r\nimport { secondsToDuration, minutesToDuration } from \"../utils/duration\";\r\n\r\n\r\nconst ProgressBar = (props) => {\r\n  const { mode, timer, isSessionActive, focusDuration, breakDuration, isSessionPaused } = props;\r\n\r\n  let currentDurationTime = mode === \"focus\" ? focusDuration : breakDuration;\r\n  currentDurationTime *= 60; // convert minutes to seconds\r\n  const timeElapsed = currentDurationTime - timer;\r\n\r\n  let width;\r\n  if (timer === 0) {\r\n    width = 100;\r\n  } else {\r\n    width = (100 / currentDurationTime) * timeElapsed;\r\n  }\r\n\r\n  return (\r\n    <div style={{ display: isSessionActive ? \"block\" : \"none\" }}>\r\n      {/* TODO: This area should show only when a focus or break session is running or pauses */}\r\n      <div className=\"row mb-2\">\r\n        <div className=\"col\">\r\n          {/* TODO: Update message below to include current session (Focusing or On Break) and total duration */}\r\n          <h2 data-testid=\"session-title\">\r\n            {mode === \"focus\" ? \"Focusing\" : \"On Break\"} for{\" \"}\r\n            {mode === \"focus\" ? minutesToDuration(focusDuration) : minutesToDuration(breakDuration)}{\" \"}\r\n            minutes\r\n          </h2>\r\n          {/* TODO: Update message below to include time remaining in the current session */}\r\n          <p className=\"lead\" data-testid=\"session-sub-title\">\r\n            {/* 25:00 remaining */}\r\n            {secondsToDuration(timer)} remaining\r\n          </p>\r\n          <h3 style={{ display: isSessionPaused ? \"block\" : \"none\" }}>PAUSED</h3>\r\n        </div>\r\n      </div>\r\n      <div className=\"row mb-2\">\r\n        <div className=\"col\">\r\n          <div className=\"progress\" style={{ height: \"20px\" }}>\r\n            <div\r\n              className=\"progress-bar\"\r\n              role=\"progressbar\"\r\n              aria-valuemin=\"0\"\r\n              aria-valuemax=\"100\"\r\n              aria-valuenow={width} // TODO: Increase aria-valuenow as elapsed time increases\r\n              style={{ width: `${width}%` }} // TODO: Increase width % as elapsed time increases\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProgressBar;"]},"metadata":{},"sourceType":"module"}